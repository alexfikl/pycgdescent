# SPDX-FileCopyrightText: 2020-2022 Alexandru Fikl <alexfikl@gmail.com>
#
# SPDX-License-Identifier: MIT

from typing import TYPE_CHECKING, Any, Callable, Optional, Tuple

import numpy as np

if TYPE_CHECKING:
    ArrayType = np.ndarray[Any, np.dtype[np.float64]]
else:
    ArrayType = np.ndarray

def cg_default(arg0: object) -> None: ...
def cg_descent(
    x: ArrayType,
    grad_tol: float,
    param: Optional["cg_parameter"],
    value: Callable[[ArrayType], float],
    grad: Callable[[ArrayType, ArrayType], None],
    valgrad: Optional[Callable[[ArrayType, ArrayType], float]],
    callback: Optional[Callable[["cg_iter_stats"], int]],
    work: Optional[ArrayType],
) -> Tuple[ArrayType, "cg_stats", bool]: ...

class cg_iter_stats:
    def __init__(self) -> None: ...
    @property
    def alpha(self) -> float: ...
    @property
    def d(self) -> ArrayType: ...
    @property
    def f(self) -> float: ...
    @property
    def g(self) -> ArrayType: ...
    @property
    def iter(self) -> int: ...
    @property
    def x(self) -> ArrayType: ...

class cg_parameter:
    def __init__(self) -> None: ...
    @property
    def AWolfe(self) -> int: ...
    @AWolfe.setter
    def AWolfe(self, val: int) -> None: ...
    @property
    def AWolfeFac(self) -> float: ...
    @AWolfeFac.setter
    def AWolfeFac(self, val: float) -> None: ...
    @property
    def AdaptiveBeta(self) -> int: ...
    @AdaptiveBeta.setter
    def AdaptiveBeta(self, val: int) -> None: ...
    @property
    def BetaLower(self) -> float: ...
    @BetaLower.setter
    def BetaLower(self, val: float) -> None: ...
    @property
    def CubicCutOff(self) -> float: ...
    @CubicCutOff.setter
    def CubicCutOff(self, val: float) -> None: ...
    @property
    def ExpandSafe(self) -> float: ...
    @ExpandSafe.setter
    def ExpandSafe(self, val: float) -> None: ...
    @property
    def LBFGS(self) -> int: ...
    @LBFGS.setter
    def LBFGS(self, val: int) -> None: ...
    @property
    def PertRule(self) -> int: ...
    @PertRule.setter
    def PertRule(self, val: int) -> None: ...
    @property
    def PrintFinal(self) -> int: ...
    @PrintFinal.setter
    def PrintFinal(self, val: int) -> None: ...
    @property
    def PrintLevel(self) -> int: ...
    @PrintLevel.setter
    def PrintLevel(self, val: int) -> None: ...
    @property
    def PrintParms(self) -> int: ...
    @PrintParms.setter
    def PrintParms(self, val: int) -> None: ...
    @property
    def Qdecay(self) -> float: ...
    @Qdecay.setter
    def Qdecay(self, val: float) -> None: ...
    @property
    def QuadCutOff(self) -> float: ...
    @QuadCutOff.setter
    def QuadCutOff(self, val: float) -> None: ...
    @property
    def QuadSafe(self) -> float: ...
    @QuadSafe.setter
    def QuadSafe(self, val: float) -> None: ...
    @property
    def QuadStep(self) -> int: ...
    @QuadStep.setter
    def QuadStep(self, val: int) -> None: ...
    @property
    def SecantAmp(self) -> float: ...
    @SecantAmp.setter
    def SecantAmp(self, val: float) -> None: ...
    @property
    def SmallCost(self) -> float: ...
    @SmallCost.setter
    def SmallCost(self, val: float) -> None: ...
    @property
    def StopFac(self) -> float: ...
    @StopFac.setter
    def StopFac(self, val: float) -> None: ...
    @property
    def StopRule(self) -> int: ...
    @StopRule.setter
    def StopRule(self, val: int) -> None: ...
    @property
    def SubCheck(self) -> int: ...
    @SubCheck.setter
    def SubCheck(self, val: int) -> None: ...
    @property
    def SubSkip(self) -> int: ...
    @SubSkip.setter
    def SubSkip(self, val: int) -> None: ...
    @property
    def UseCubic(self) -> int: ...
    @UseCubic.setter
    def UseCubic(self, val: int) -> None: ...
    @property
    def debug(self) -> int: ...
    @debug.setter
    def debug(self, val: int) -> None: ...
    @property
    def debugtol(self) -> float: ...
    @debugtol.setter
    def debugtol(self, val: float) -> None: ...
    @property
    def delta(self) -> float: ...
    @delta.setter
    def delta(self, val: float) -> None: ...
    @property
    def egrow(self) -> float: ...
    @egrow.setter
    def egrow(self, val: float) -> None: ...
    @property
    def eps(self) -> float: ...
    @eps.setter
    def eps(self, val: float) -> None: ...
    @property
    def eta0(self) -> float: ...
    @eta0.setter
    def eta0(self, val: float) -> None: ...
    @property
    def eta1(self) -> float: ...
    @eta1.setter
    def eta1(self, val: float) -> None: ...
    @property
    def eta2(self) -> float: ...
    @eta2.setter
    def eta2(self, val: float) -> None: ...
    @property
    def feps(self) -> float: ...
    @feps.setter
    def feps(self, val: float) -> None: ...
    @property
    def gamma(self) -> float: ...
    @gamma.setter
    def gamma(self, val: float) -> None: ...
    @property
    def max_step(self) -> float: ...
    @max_step.setter
    def max_step(self, val: float) -> None: ...
    @property
    def maxit(self) -> int: ...
    @maxit.setter
    def maxit(self, val: int) -> None: ...
    @property
    def memory(self) -> int: ...
    @memory.setter
    def memory(self, val: int) -> None: ...
    @property
    def nan_decay(self) -> float: ...
    @nan_decay.setter
    def nan_decay(self, val: float) -> None: ...
    @property
    def nan_rho(self) -> float: ...
    @nan_rho.setter
    def nan_rho(self, val: float) -> None: ...
    @property
    def neps(self) -> int: ...
    @neps.setter
    def neps(self, val: int) -> None: ...
    @property
    def nline(self) -> int: ...
    @nline.setter
    def nline(self, val: int) -> None: ...
    @property
    def nshrink(self) -> int: ...
    @nshrink.setter
    def nshrink(self, val: int) -> None: ...
    @property
    def nslow(self) -> int: ...
    @nslow.setter
    def nslow(self, val: int) -> None: ...
    @property
    def ntries(self) -> int: ...
    @ntries.setter
    def ntries(self, val: int) -> None: ...
    @property
    def psi0(self) -> float: ...
    @psi0.setter
    def psi0(self, val: float) -> None: ...
    @property
    def psi1(self) -> float: ...
    @psi1.setter
    def psi1(self, val: float) -> None: ...
    @property
    def psi2(self) -> float: ...
    @psi2.setter
    def psi2(self, val: float) -> None: ...
    @property
    def psi_hi(self) -> float: ...
    @psi_hi.setter
    def psi_hi(self, val: float) -> None: ...
    @property
    def psi_lo(self) -> float: ...
    @psi_lo.setter
    def psi_lo(self, val: float) -> None: ...
    @property
    def qeps(self) -> float: ...
    @qeps.setter
    def qeps(self, val: float) -> None: ...
    @property
    def qrestart(self) -> int: ...
    @qrestart.setter
    def qrestart(self, val: int) -> None: ...
    @property
    def qrule(self) -> float: ...
    @qrule.setter
    def qrule(self, val: float) -> None: ...
    @property
    def restart_fac(self) -> float: ...
    @restart_fac.setter
    def restart_fac(self, val: float) -> None: ...
    @property
    def rho(self) -> float: ...
    @rho.setter
    def rho(self, val: float) -> None: ...
    @property
    def sigma(self) -> float: ...
    @sigma.setter
    def sigma(self, val: float) -> None: ...
    @property
    def step(self) -> float: ...
    @step.setter
    def step(self, val: float) -> None: ...
    @property
    def theta(self) -> float: ...
    @theta.setter
    def theta(self, val: float) -> None: ...

class cg_stats:
    def __init__(self) -> None: ...
    @property
    def IterSub(self) -> int: ...
    @property
    def NumSub(self) -> int: ...
    @property
    def f(self) -> float: ...
    @property
    def gnorm(self) -> float: ...
    @property
    def iter(self) -> int: ...
    @property
    def nfunc(self) -> int: ...
    @property
    def ngrad(self) -> int: ...
